#!/usr/local/bin/python3
import argparse, binascii, struct, sys
import HamsterHelpers
import HamsterPacket
import base64
import heatshrink2

##
## @brief      Convert a hexdump in "ifile" to a bindump in "ofile"
##
## @param      ifile  The ifile file object
## @param      ofile  The ofile file object
## @param      reverse If the ifile is reversed
## @param      compressed If the hex is compressed
##
## @return     none
##
def hexdump2Bindump(ifile, ofile, reverse=False, compressed=False):
	#write the dump open tag to the ofile:
	ofile.write((HamsterPacket.BINDUMP_OPEN_TAG + '\r\n').encode('ascii'))

	byte_ascii_bin = ifile.read(2) #every byte is represented by 2 ASCII hex digits
	digit_count = 0

	byte_list = b''

	while byte_ascii_bin:
		#status readout
		if (digit_count % 10000 == 0):
			print('\r{} bytes converted.\t'.format(digit_count), end="")

		#convert the encoded ASCII hex digits into their binary representation and write them to the file
		byte_str = byte_ascii_bin.decode(encoding='ascii')
		if byte_str == HamsterPacket.HEX_DUMP_FRAME_PRINT_TERMINATOR:
			#this is a newline between dump frames. ignore it.
			pass
		elif len(byte_str) < 2 or byte_str[0] == '<' or byte_str[1] == '<':
			#this is the closing tag
			break
		else:
			#this is a real data byte
			byte_int = int(byte_str, 16)
			byte_bin = struct.pack('B', byte_int)
			byte_list += (byte_bin)

		#read in a new "byte"
		byte_ascii_bin = ifile.read(2)
		digit_count = digit_count + 1

	byte_list = bytearray(byte_list)

	if compressed:
		byte_list = heatshrink2.decompress(byte_list, input_buffer_size=1024, window_sz2=10, lookahead_sz2=4)
		byte_list = bytearray(byte_list)

	if reverse:
		byte_list.reverse()

	ofile.write(byte_list)

	#write the dump close tag to the ofile
	ofile.write((HamsterPacket.BINDUMP_CLOSE_TAG + '\r\n').encode('ascii'))
	print('')


##
## @brief      Convert a base64 encoded byte stream in "ifile" to a bindump in "ofile"
##
## @param      ifile  The ifile file object
## @param      ofile  The ofile file object
## @param      reverse If the ifile is reversed
## @param      compressed If the hex is compressed
##
## @return     none
##
def base64ToBindump(ifile, ofile, reverse=False, compressed=False):
	#write the dump open tag to the ofile:
	ofile.write((HamsterPacket.BINDUMP_OPEN_TAG + '\r\n').encode('ascii'))
	frame_sepearation_ch = '!'
	base64_data = ""
	counter = 0   
	cur_line = ""
	line_bytes = []
	frame_bytes = bytearray()
	final_bytes = bytearray()
	while True:
		cur = ifile.read(1).decode('ascii')
		if not cur:
			break
		counter += 1
		if counter%10000 == 0:
			print('\r{} chars read.\t'.format(counter), end="")

		if cur == '\n' or cur == '\r':
			if len(cur_line) > 0:
				try:
					line_bytes = base64.b64decode(cur_line)
					frame_bytes += bytearray(line_bytes)
				except:
					pass
				cur_line = ""
		elif cur == frame_sepearation_ch:
			if len(frame_bytes) > 0:
				if compressed:
					frame_bytes = heatshrink2.decompress(bytearray(frame_bytes), input_buffer_size=8192, window_sz2=10, lookahead_sz2=4)
					frame_bytes = bytearray(frame_bytes)
				final_bytes += frame_bytes
			frame_bytes = bytearray()
		elif cur == '<':
			break
		else:
			cur_line += cur

	# handle the remaining frame
	if len(frame_bytes) > 0:
		if compressed:
			frame_bytes = heatshrink2.decompress(bytearray(frame_bytes), input_buffer_size=8192, window_sz2=10, lookahead_sz2=4)
			frame_bytes = bytearray(frame_bytes)
		final_bytes += frame_bytes

	if reverse:
		final_bytes.reverse()

	ofile.write(final_bytes)

	#write the dump close tag to the ofile
	ofile.write((HamsterPacket.BINDUMP_CLOSE_TAG + '\r\n').encode('ascii'))
	print('Size of uncompressed data: ' + str(len(final_bytes)))


##
## @brief      Populate the argparse parser with its argument format
##
## @param      parser  pre-instatiated argparse parser
##
## @return     the populated parser
##
def addargs(parser):
	parser.add_argument('input_file', 
											help='Input file containing a hexdump.')
	parser.add_argument('-o', '--output_file', default='hamster.bindump',
											help='Name of the binary file to be generated by this program on your hard drive.')
	return parser

######### MAIN
def main():
	parser = argparse.ArgumentParser(description='Converts a file containing a hexdump or a base64 dump into a file containing a bindump.')
	addargs(parser)
	args = parser.parse_args()

	with open(args.input_file, 'rb') as ifile, open(args.output_file, 'wb') as ofile:
		if HamsterHelpers.seekToDump(ifile, HamsterPacket.HEXDUMP_OPEN_TAG):
			print("Uncompressed Hex Forward Dump found. Converting to bindump...")
			hexdump2Bindump(ifile, ofile)
		elif HamsterHelpers.seekToDump(ifile, HamsterPacket.HEXDUMP_REV_OPEN_TAG):
			print("Uncompressed Hex Reverse Dump found. Converting to bindump...")
			hexdump2Bindump(ifile, ofile, reverse=True) 
		elif HamsterHelpers.seekToDump(ifile, HamsterPacket.BASE64_REV_OPEN_TAG):
			print("Uncompressed Base64 Reverse Dump found. Converting to bindump...")
			base64ToBindump(ifile, ofile, reverse=True)
		elif HamsterHelpers.seekToDump(ifile, HamsterPacket.COMPRESSED_HEX_REV_OPEN_TAG):
			print("Compressed Hex Reverse Dump found. Converting to bindump...")
			hexdump2Bindump(ifile, ofile, reverse=True, compressed=True)
		elif HamsterHelpers.seekToDump(ifile, HamsterPacket.COMPRESSED_BASE64_REV_OPEN_TAG):
			print("Compressed Base64 Reverse Dump found. Converting to bindump...")
			base64ToBindump(ifile, ofile, reverse=True, compressed=True)
		else:
			print('No dump found in file "{}"'.format(args.input_file))
			return 1


		
	print('Bindump exported to {}'.format(args.output_file))


if __name__ == '__main__':
	sys.exit(main())
