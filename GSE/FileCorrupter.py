#!/usr/local/bin/python3
import argparse
import random

## This helper program corrupts a log file by randomly changing letters and deleting chunks of data
## Used to see whether the DUMP can work with a bit of error during transmission


##
## @brief      Populate the argparse parser with its argument format
##
## @param      parser  pre-instatiated argparse parser
##
## @return     the populated parser
##
def addargs(parser):
    parser.add_argument("input_file", help="Input file containing a hexdump.")
    parser.add_argument(
        "-o",
        "--output_file",
        default="hamster_corrupted.log",
        help="Name of the log file to be generated by this program on your hard drive.",
    )
    return parser


######### MAIN
def main():
    parser = argparse.ArgumentParser(
        description="Converts a file containing a hexdump or a base64 dump into a file containing a bindump."
    )
    addargs(parser)
    args = parser.parse_args()

    with open(args.input_file, "rb") as ifile, open(args.output_file, "wb") as ofile:
        inp_bytes = bytearray(ifile.read())
        corruption_rate = 1 / 5000
        changes = int(len(inp_bytes) * corruption_rate)

        # chose individual values and randomly change them
        for i in range(changes):
            index = random.randint(0, len(inp_bytes))
            inp_bytes[index] = random.randint(0, 127)

        deletion_rate = 1 / 10000
        deletions = int(len(inp_bytes) * deletion_rate)
        # delete chunks of data randomly
        for i in range(deletions):
            sindex = random.randint(0, len(inp_bytes))
            eindex = min(sindex + random.randint(50, 200), len(inp_bytes))
            del inp_bytes[sindex:eindex]

        ofile.write(inp_bytes)
        print(
            "Corrupted log with {} changes exported to {}".format(
                changes + deletions, args.output_file
            )
        )


if __name__ == "__main__":
    main()
